{"ast":null,"code":"var _jsxFileName = \"/media/hailey/More/AI/artifacts/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst StringArtGenerator = () => {\n  _s();\n  const canvasRef = useRef(null);\n  const imageCanvasRef = useRef(null);\n  const [numPegs, setNumPegs] = useState(200);\n  const [numLines, setNumLines] = useState(1000);\n  const [canvasSize, setCanvasSize] = useState(600);\n  const [uploadedImage, setUploadedImage] = useState(null);\n  const [isApproximating, setIsApproximating] = useState(false);\n  class StringArt {\n    constructor(numPegs, canvasSize) {\n      this.numPegs = numPegs;\n      this.canvasSize = canvasSize;\n      this.radius = canvasSize / 2;\n      this.pegPositions = [];\n      this.generatePegPositions();\n    }\n    generatePegPositions() {\n      for (let i = 0; i < this.numPegs; i++) {\n        const angle = i / this.numPegs * 2 * Math.PI;\n        const x = this.radius + this.radius * Math.cos(angle);\n        const y = this.radius + this.radius * Math.sin(angle);\n        this.pegPositions.push({\n          x,\n          y\n        });\n      }\n    }\n    drawLine(ctx, startPeg, endPeg) {\n      const startPos = this.pegPositions[startPeg];\n      const endPos = this.pegPositions[endPeg];\n      const dx = endPos.x - startPos.x;\n      const dy = endPos.y - startPos.y;\n      const distance = Math.sqrt(dx * dx + dy * dy);\n      const numStrands = 5; // Total number of strands (adjust as needed)\n      const strandWidth = 0.5; // Width of each strand\n      const totalWidth = strandWidth * numStrands;\n      const perpX = -dy / distance;\n      const perpY = dx / distance;\n      for (let i = 0; i < numStrands; i++) {\n        const offset = (i - (numStrands - 1) / 2) * strandWidth;\n        const x1 = startPos.x + offset * perpX;\n        const y1 = startPos.y + offset * perpY;\n        const x2 = endPos.x + offset * perpX;\n        const y2 = endPos.y + offset * perpY;\n        ctx.beginPath();\n        ctx.moveTo(x1, y1);\n        ctx.lineTo(x2, y2);\n\n        // Calculate opacity based on distance from center strand\n        const centerDistance = Math.abs(i - (numStrands - 1) / 2);\n        const opacity = 1 - centerDistance / (numStrands - 1) * 0.8; // 0.8 is the max reduction in opacity\n\n        ctx.strokeStyle = `rgba(255, 255, 255, ${opacity})`;\n        ctx.lineWidth = strandWidth;\n        ctx.stroke();\n      }\n    }\n    generateRandomArt(ctx, numLines) {\n      ctx.fillStyle = 'black';\n      ctx.fillRect(0, 0, this.canvasSize, this.canvasSize);\n      for (let i = 0; i < numLines; i++) {\n        const startPeg = Math.floor(Math.random() * this.numPegs);\n        const endPeg = Math.floor(Math.random() * this.numPegs);\n        this.drawLine(ctx, startPeg, endPeg);\n      }\n    }\n    approximateImage(ctx, targetImageData, numLines) {\n      ctx.fillStyle = 'black';\n      ctx.fillRect(0, 0, this.canvasSize, this.canvasSize);\n      let currentPeg = 0;\n      const tempCanvas = document.createElement('canvas');\n      tempCanvas.width = this.canvasSize;\n      tempCanvas.height = this.canvasSize;\n      const tempCtx = tempCanvas.getContext('2d');\n      for (let i = 0; i < numLines; i++) {\n        let bestError = Infinity;\n        let bestPeg = -1;\n        for (let nextPeg = 0; nextPeg < this.numPegs; nextPeg++) {\n          if (nextPeg === currentPeg) continue;\n          tempCtx.drawImage(ctx.canvas, 0, 0);\n          this.drawLine(tempCtx, currentPeg, nextPeg);\n          const error = this.calculateError(tempCtx, targetImageData);\n          if (error < bestError) {\n            bestError = error;\n            bestPeg = nextPeg;\n          }\n        }\n        this.drawLine(ctx, currentPeg, bestPeg);\n        currentPeg = bestPeg;\n      }\n    }\n    calculateError(ctx, targetImageData) {\n      const currentImageData = ctx.getImageData(0, 0, this.canvasSize, this.canvasSize).data;\n      let error = 0;\n      for (let i = 0; i < currentImageData.length; i += 4) {\n        const currentPixel = (currentImageData[i] + currentImageData[i + 1] + currentImageData[i + 2]) / 3;\n        const targetPixel = (targetImageData[i] + targetImageData[i + 1] + targetImageData[i + 2]) / 3;\n        error += Math.abs(currentPixel - targetPixel);\n      }\n      return error;\n    }\n  }\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    const stringArt = new StringArt(numPegs, canvasSize);\n    if (isApproximating && uploadedImage) {\n      const imageCanvas = imageCanvasRef.current;\n      const imageCtx = imageCanvas.getContext('2d');\n      const targetImageData = imageCtx.getImageData(0, 0, canvasSize, canvasSize).data;\n      stringArt.approximateImage(ctx, targetImageData, numLines);\n    } else {\n      stringArt.generateRandomArt(ctx, numLines);\n    }\n  }, [numPegs, numLines, canvasSize, isApproximating, uploadedImage]);\n  useEffect(() => {\n    if (uploadedImage) {\n      const canvas = imageCanvasRef.current;\n      const ctx = canvas.getContext('2d');\n      const img = new Image();\n      img.onload = () => {\n        // Calculate dimensions for center crop\n        const size = Math.min(img.width, img.height);\n        const sourceX = (img.width - size) / 2;\n        const sourceY = (img.height - size) / 2;\n\n        // Draw and scale image\n        ctx.drawImage(img, sourceX, sourceY, size, size, 0, 0, canvasSize, canvasSize);\n\n        // Convert to grayscale\n        const imageData = ctx.getImageData(0, 0, canvasSize, canvasSize);\n        const data = imageData.data;\n        for (let i = 0; i < data.length; i += 4) {\n          const avg = (data[i] + data[i + 1] + data[i + 2]) / 3;\n          data[i] = data[i + 1] = data[i + 2] = avg;\n        }\n        ctx.putImageData(imageData, 0, 0);\n      };\n      img.src = URL.createObjectURL(uploadedImage);\n    }\n  }, [uploadedImage, canvasSize]);\n  const handleImageUpload = event => {\n    if (event.target.files && event.target.files[0]) {\n      setUploadedImage(event.target.files[0]);\n      setIsApproximating(true);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex flex-col items-center space-y-4\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex space-x-4\",\n      children: [/*#__PURE__*/_jsxDEV(\"canvas\", {\n        ref: canvasRef,\n        width: canvasSize,\n        height: canvasSize,\n        className: \"border border-gray-300\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n        ref: imageCanvasRef,\n        width: canvasSize,\n        height: canvasSize,\n        className: \"border border-gray-300\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"space-y-2\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"numPegs\",\n          className: \"mr-2\",\n          children: \"Number of Pegs:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          id: \"numPegs\",\n          value: numPegs,\n          onChange: e => setNumPegs(parseInt(e.target.value)),\n          className: \"border border-gray-300 px-2 py-1\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"numLines\",\n          className: \"mr-2\",\n          children: \"Number of Lines:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 201,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          id: \"numLines\",\n          value: numLines,\n          onChange: e => setNumLines(parseInt(e.target.value)),\n          className: \"border border-gray-300 px-2 py-1\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 202,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"canvasSize\",\n          className: \"mr-2\",\n          children: \"Canvas Size:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 211,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          id: \"canvasSize\",\n          value: canvasSize,\n          onChange: e => setCanvasSize(parseInt(e.target.value)),\n          className: \"border border-gray-300 px-2 py-1\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 212,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"imageUpload\",\n          className: \"mr-2\",\n          children: \"Upload Image:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 221,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          id: \"imageUpload\",\n          accept: \"image/*\",\n          onChange: handleImageUpload,\n          className: \"border border-gray-300 px-2 py-1\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 222,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setIsApproximating(!isApproximating),\n          className: \"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\",\n          children: isApproximating ? \"Generate Random Art\" : \"Approximate Image\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 231,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 174,\n    columnNumber: 5\n  }, this);\n};\n_s(StringArtGenerator, \"s6S4ZhIboGo86KD/mDi6iRnucWk=\");\n_c = StringArtGenerator;\nexport default StringArtGenerator;\nvar _c;\n$RefreshReg$(_c, \"StringArtGenerator\");","map":{"version":3,"names":["React","useEffect","useRef","useState","jsxDEV","_jsxDEV","StringArtGenerator","_s","canvasRef","imageCanvasRef","numPegs","setNumPegs","numLines","setNumLines","canvasSize","setCanvasSize","uploadedImage","setUploadedImage","isApproximating","setIsApproximating","StringArt","constructor","radius","pegPositions","generatePegPositions","i","angle","Math","PI","x","cos","y","sin","push","drawLine","ctx","startPeg","endPeg","startPos","endPos","dx","dy","distance","sqrt","numStrands","strandWidth","totalWidth","perpX","perpY","offset","x1","y1","x2","y2","beginPath","moveTo","lineTo","centerDistance","abs","opacity","strokeStyle","lineWidth","stroke","generateRandomArt","fillStyle","fillRect","floor","random","approximateImage","targetImageData","currentPeg","tempCanvas","document","createElement","width","height","tempCtx","getContext","bestError","Infinity","bestPeg","nextPeg","drawImage","canvas","error","calculateError","currentImageData","getImageData","data","length","currentPixel","targetPixel","current","stringArt","imageCanvas","imageCtx","img","Image","onload","size","min","sourceX","sourceY","imageData","avg","putImageData","src","URL","createObjectURL","handleImageUpload","event","target","files","className","children","ref","fileName","_jsxFileName","lineNumber","columnNumber","htmlFor","type","id","value","onChange","e","parseInt","accept","onClick","_c","$RefreshReg$"],"sources":["/media/hailey/More/AI/artifacts/src/App.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\n\nconst StringArtGenerator = () => {\n  const canvasRef = useRef(null);\n  const imageCanvasRef = useRef(null);\n  const [numPegs, setNumPegs] = useState(200);\n  const [numLines, setNumLines] = useState(1000);\n  const [canvasSize, setCanvasSize] = useState(600);\n  const [uploadedImage, setUploadedImage] = useState(null);\n  const [isApproximating, setIsApproximating] = useState(false);\n\n  class StringArt {\n    constructor(numPegs, canvasSize) {\n      this.numPegs = numPegs;\n      this.canvasSize = canvasSize;\n      this.radius = canvasSize / 2;\n      this.pegPositions = [];\n      this.generatePegPositions();\n    }\n\n    generatePegPositions() {\n      for (let i = 0; i < this.numPegs; i++) {\n        const angle = (i / this.numPegs) * 2 * Math.PI;\n        const x = this.radius + this.radius * Math.cos(angle);\n        const y = this.radius + this.radius * Math.sin(angle);\n        this.pegPositions.push({ x, y });\n      }\n    }\n\n    drawLine(ctx, startPeg, endPeg) {\n      const startPos = this.pegPositions[startPeg];\n      const endPos = this.pegPositions[endPeg];\n\n      const dx = endPos.x - startPos.x;\n      const dy = endPos.y - startPos.y;\n      const distance = Math.sqrt(dx * dx + dy * dy);\n\n      const numStrands = 5; // Total number of strands (adjust as needed)\n      const strandWidth = 0.5; // Width of each strand\n      const totalWidth = strandWidth * numStrands;\n\n      const perpX = -dy / distance;\n      const perpY = dx / distance;\n\n      for (let i = 0; i < numStrands; i++) {\n        const offset = (i - (numStrands - 1) / 2) * strandWidth;\n        const x1 = startPos.x + offset * perpX;\n        const y1 = startPos.y + offset * perpY;\n        const x2 = endPos.x + offset * perpX;\n        const y2 = endPos.y + offset * perpY;\n\n        ctx.beginPath();\n        ctx.moveTo(x1, y1);\n        ctx.lineTo(x2, y2);\n\n        // Calculate opacity based on distance from center strand\n        const centerDistance = Math.abs(i - (numStrands - 1) / 2);\n        const opacity = 1 - (centerDistance / (numStrands - 1)) * 0.8; // 0.8 is the max reduction in opacity\n\n        ctx.strokeStyle = `rgba(255, 255, 255, ${opacity})`;\n        ctx.lineWidth = strandWidth;\n        ctx.stroke();\n      }\n    }\n\n    generateRandomArt(ctx, numLines) {\n      ctx.fillStyle = 'black';\n      ctx.fillRect(0, 0, this.canvasSize, this.canvasSize);\n\n      for (let i = 0; i < numLines; i++) {\n        const startPeg = Math.floor(Math.random() * this.numPegs);\n        const endPeg = Math.floor(Math.random() * this.numPegs);\n        this.drawLine(ctx, startPeg, endPeg);\n      }\n    }\n\n    approximateImage(ctx, targetImageData, numLines) {\n      ctx.fillStyle = 'black';\n      ctx.fillRect(0, 0, this.canvasSize, this.canvasSize);\n\n      let currentPeg = 0;\n      const tempCanvas = document.createElement('canvas');\n      tempCanvas.width = this.canvasSize;\n      tempCanvas.height = this.canvasSize;\n      const tempCtx = tempCanvas.getContext('2d');\n\n      for (let i = 0; i < numLines; i++) {\n        let bestError = Infinity;\n        let bestPeg = -1;\n\n        for (let nextPeg = 0; nextPeg < this.numPegs; nextPeg++) {\n          if (nextPeg === currentPeg) continue;\n\n          tempCtx.drawImage(ctx.canvas, 0, 0);\n          this.drawLine(tempCtx, currentPeg, nextPeg);\n\n          const error = this.calculateError(tempCtx, targetImageData);\n          if (error < bestError) {\n            bestError = error;\n            bestPeg = nextPeg;\n          }\n        }\n\n        this.drawLine(ctx, currentPeg, bestPeg);\n        currentPeg = bestPeg;\n      }\n    }\n\n    calculateError(ctx, targetImageData) {\n      const currentImageData = ctx.getImageData(0, 0, this.canvasSize, this.canvasSize).data;\n      let error = 0;\n\n      for (let i = 0; i < currentImageData.length; i += 4) {\n        const currentPixel = (currentImageData[i] + currentImageData[i + 1] + currentImageData[i + 2]) / 3;\n        const targetPixel = (targetImageData[i] + targetImageData[i + 1] + targetImageData[i + 2]) / 3;\n        error += Math.abs(currentPixel - targetPixel);\n      }\n\n      return error;\n    }\n  }\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    const stringArt = new StringArt(numPegs, canvasSize);\n\n    if (isApproximating && uploadedImage) {\n      const imageCanvas = imageCanvasRef.current;\n      const imageCtx = imageCanvas.getContext('2d');\n      const targetImageData = imageCtx.getImageData(0, 0, canvasSize, canvasSize).data;\n      stringArt.approximateImage(ctx, targetImageData, numLines);\n    } else {\n      stringArt.generateRandomArt(ctx, numLines);\n    }\n  }, [numPegs, numLines, canvasSize, isApproximating, uploadedImage]);\n\n  useEffect(() => {\n    if (uploadedImage) {\n      const canvas = imageCanvasRef.current;\n      const ctx = canvas.getContext('2d');\n\n      const img = new Image();\n      img.onload = () => {\n        // Calculate dimensions for center crop\n        const size = Math.min(img.width, img.height);\n        const sourceX = (img.width - size) / 2;\n        const sourceY = (img.height - size) / 2;\n\n        // Draw and scale image\n        ctx.drawImage(img, sourceX, sourceY, size, size, 0, 0, canvasSize, canvasSize);\n\n        // Convert to grayscale\n        const imageData = ctx.getImageData(0, 0, canvasSize, canvasSize);\n        const data = imageData.data;\n        for (let i = 0; i < data.length; i += 4) {\n          const avg = (data[i] + data[i + 1] + data[i + 2]) / 3;\n          data[i] = data[i + 1] = data[i + 2] = avg;\n        }\n        ctx.putImageData(imageData, 0, 0);\n      };\n      img.src = URL.createObjectURL(uploadedImage);\n    }\n  }, [uploadedImage, canvasSize]);\n\n  const handleImageUpload = (event) => {\n    if (event.target.files && event.target.files[0]) {\n      setUploadedImage(event.target.files[0]);\n      setIsApproximating(true);\n    }\n  };\n\n  return (\n    <div className=\"flex flex-col items-center space-y-4\">\n      <div className=\"flex space-x-4\">\n        <canvas\n          ref={canvasRef}\n          width={canvasSize}\n          height={canvasSize}\n          className=\"border border-gray-300\"\n        />\n        <canvas\n          ref={imageCanvasRef}\n          width={canvasSize}\n          height={canvasSize}\n          className=\"border border-gray-300\"\n        />\n      </div>\n      <div className=\"space-y-2\">\n        <div>\n          <label htmlFor=\"numPegs\" className=\"mr-2\">Number of Pegs:</label>\n          <input\n            type=\"number\"\n            id=\"numPegs\"\n            value={numPegs}\n            onChange={(e) => setNumPegs(parseInt(e.target.value))}\n            className=\"border border-gray-300 px-2 py-1\"\n          />\n        </div>\n        <div>\n          <label htmlFor=\"numLines\" className=\"mr-2\">Number of Lines:</label>\n          <input\n            type=\"number\"\n            id=\"numLines\"\n            value={numLines}\n            onChange={(e) => setNumLines(parseInt(e.target.value))}\n            className=\"border border-gray-300 px-2 py-1\"\n          />\n        </div>\n        <div>\n          <label htmlFor=\"canvasSize\" className=\"mr-2\">Canvas Size:</label>\n          <input\n            type=\"number\"\n            id=\"canvasSize\"\n            value={canvasSize}\n            onChange={(e) => setCanvasSize(parseInt(e.target.value))}\n            className=\"border border-gray-300 px-2 py-1\"\n          />\n        </div>\n        <div>\n          <label htmlFor=\"imageUpload\" className=\"mr-2\">Upload Image:</label>\n          <input\n            type=\"file\"\n            id=\"imageUpload\"\n            accept=\"image/*\"\n            onChange={handleImageUpload}\n            className=\"border border-gray-300 px-2 py-1\"\n          />\n        </div>\n        <div>\n          <button\n            onClick={() => setIsApproximating(!isApproximating)}\n            className=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\"\n          >\n            {isApproximating ? \"Generate Random Art\" : \"Approximate Image\"}\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default StringArtGenerator;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}